@{
    ViewBag.Title = "Usage Dashboard";
}


<style>
    .ui-chart-container
    {
        border: transparent;
        background-color: lightgray;
        font-size:small;
    }

    .chart-border {
        background-color:lightgray;
        padding:10px;
    }

    label {
        color: white;
    }

    #showQuest {
        margin: 20px auto 0 auto;
    }

    .padding10 {
        padding: 10px;
    }

    #showQuest .header {
        background-color: red;
        border-bottom: 3px solid;
        margin-bottom:20px;
        color:white;
    }

    #showQuest h1 {
        margin: 0 0 10px 0;
        padding: 0;
        font-size: 22px;
        color:white;
    }

    .tutorial p, .tutorial a, .tutorial li {
        font-family: Helvetica, sans-serif;
    }
</style>

<div class="container">

    <div class="row" id="showQuest">
        <div class="col-lg-12 header">
            <div class="padding10">
                <h1>Whose (Phone) Line is it Anyway?</h1>
            </div>
        </div>
    </div>

    <div class="row tutorial">
        <div class="col-lg-12"><p>This sample demonstrates using the Twilio Usage APIs to build a simple account usage dashboard.  Use the options on the right to change the data shown in the graphs.</p></div>
    </div>

    <div class="row">
        <div class="col-lg-12"><h1>Call Usage</h1></div>
    </div>

    <div class="row">
        <div class="col-lg-9">
            <div class="chart-border">
                <div class="usageChart" id="calls"></div>
            </div>
        </div>
        <div class="col-lg-3">
            <form class="form-horizontal">
                <div class="form-group">
                    <label class="control-label">Call Type:</label>
                    <div class="controls">
                        <select data-bind="options: callsViewModel.base.usageTypes, optionsText: 'key', optionsValue: 'value', value: callsViewModel.base.selectedUsageType"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">Interval:</label>
                    <div class="controls">
                        <select data-bind="options: callsViewModel.base.intervals, optionsText: 'key', optionsValue: 'value', value: callsViewModel.base.selectedInterval"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">Start Date:</label>
                    <div class="controls">
                        <input class="dateSelector" data-bind="datepicker: callsViewModel.base.startDate, datePickerOptions: { dateFormat: 'mm/dd/yy' }" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">EndDate:</label>
                    <div class="controls">
                       <input class="dateSelector" data-bind="datepicker: callsViewModel.base.endDate, datePickerOptions: { dateFormat: 'mm/dd/yy' }" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="controls">
                        <button type="button" class="refresh btn" value="calls">Refresh</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col-lg-12"><h1>SMS Usage</h1></div>
    </div>

    <div class="row">
        <div class="col-lg-9">
            <div class="chart-border">
                <div class="usageChart" id="smsmessages"></div>
            </div>
        </div>
        <div class="col-lg-3">
            <form class="form-horizontal">
                <div class="form-group">
                    <label class="control-label">Source:</label>
                    <div class="controls">
                        <select data-bind="options: smsmessagesViewModel.base.usageTypes, optionsText: 'key', optionsValue: 'value', value: smsmessagesViewModel.base.selectedUsageType"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">Interval:</label>
                    <div class="controls">
                        <select data-bind="options: smsmessagesViewModel.base.intervals, optionsText: 'key', optionsValue: 'value',  value: smsmessagesViewModel.base.selectedInterval"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">Start Date:</label>
                    <div class="controls">
                        <input class="dateSelector" data-bind="datepicker: smsmessagesViewModel.base.startDate" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">EndDate:</label>
                    <div class="controls">
                        <input class="dateSelector" data-bind="datepicker: smsmessagesViewModel.base.endDate" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="controls">
                       <button type="button" class="refresh btn" value="smsmessages">Refresh</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <br />
</div>

@section Scripts {

    @Scripts.Render("~/bundles/xdate")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/infragistics")

    <script type="text/javascript">
        ko.bindingHandlers.datepicker = {
            init: function (element, valueAccessor, allBindingsAccessor) {
                //initialize datepicker with some optional options
                $.datepicker.setDefaults({ dateFormat: 'mm/dd/yy' });

                var options = allBindingsAccessor().datepickerOptions; //|| dateTimePickerOptions;
                $(element).datepicker(options);

                //handle the field changing
                ko.utils.registerEventHandler(element, "change", function () {
                    var observable = valueAccessor();
                    var updatedValue = new Date($(element).val());

                    observable(updatedValue);
                });

                //handle disposal (if KO removes by the template binding)
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).datepicker("destroy");
                });
            },
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());

                var parsedDate = new XDate(value).toString("MM/dd/yy");
                $(element).datepicker('setDate', parsedDate);
            }
        };

        var jsonDateRE = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/;

        var parseJsonDateString = function (value) {
            var arr = value && jsonDateRE.exec(value);
            if (arr) {
                return new Date(parseInt(arr[1]));
            }
            return value;
        };
    </script>

    <script type="text/javascript">
        var vm = null;

        function KeyValuePair(key, value) {
            this.key = key;
            this.value = value;
        }

        function UsageRecord(data) {
            this.accountSid = data.AccountSid;
            this.category = data.Category;
            this.count = data.Count;
            this.countUnits = data.CountUnits;
            this.description = data.Description;
            this.endDate = new XDate(data.EndDate).toString("yyyy-MM-dd");
            this.price = parseInt(data.Price);
            this.priceUnits = parseInt(data.PriceUnits);
            this.startDate = new XDate(data.StartDate).toString("yyyy-MM-dd");
            this.usage = parseInt(data.Usage);
            this.usageUnits = parseInt(data.UsageUnits);
        }

        function CallsViewModel() {
            BaseViewModel.prototype = new BaseViewModel();

            var self = this;
            self.base = BaseViewModel.prototype;

            self.base.usageTypes = [
                new KeyValuePair("All", "calls"),
                new KeyValuePair("Incoming - All", "calls-inbound"),
                new KeyValuePair("Incoming - Local", "calls-inbound-local"),
                new KeyValuePair("Incoming - Toll Free", "calls-inbound-tollfree"),
                new KeyValuePair("Outgoing", "calls-outbound"),
                new KeyValuePair("Client", "calls-client"),
                new KeyValuePair("SIP", "calls-sip")];

            self.base.selectedInterval = ko.observable("Daily");
            self.base.selectedUsageType = ko.observable("calls");

            self.updateUsageRecords = function () {
                self.base.updateUsageRecords('calls');
            }
        }

        function SmsMessagesViewModel() {
            BaseViewModel.prototype = new BaseViewModel();

            var self = this;
            self.base = BaseViewModel.prototype;

            self.base.usageTypes = [
                new KeyValuePair("All", "sms"),
                new KeyValuePair("Incoming - All", "sms-inbound"),
                new KeyValuePair("Incoming - Short Code", "sms-inbound-shortcode"),
                new KeyValuePair("Incoming - Long Code", "sms-inbound-longcode"),
                new KeyValuePair("Outgoing - All", "sms-outbound"),
                new KeyValuePair("Outgoing - Short Code", "sms-outbound-shortcode"),
                new KeyValuePair("Outgoing - Long Code", "sms-outbound-longcode")];

            self.base.selectedInterval = ko.observable("Daily");
            self.base.selectedUsageType = ko.observable("sms");

            self.updateUsageRecords = function () {
                self.base.updateUsageRecords('smsmessages');
            }
        }

        function BaseViewModel() {
            var self = this;

            self.startDate = ko.observable(new XDate().addMonths(-1));
            self.endDate = ko.observable(new XDate());

            self.usageRecords = ko.observableArray([]);

            self.intervals = [
                new KeyValuePair("Daily", "Daily"),
                new KeyValuePair("Monthly", "Monthly"),
                new KeyValuePair("Yearly", "Yearly"),
                new KeyValuePair("All Time", "AllTime")];

            self.usageTypes = [];

            self.selectedInterval = ko.observable();
            self.selectedUsageType = ko.observable();

            self.updateUsageRecords = function (type) {
                $.getJSON("/usage/records", {
                    usageType: self.selectedUsageType(),
                    interval: self.selectedInterval(),
                    startDate: new XDate(self.startDate()).toString("MM-dd-yyyy"),
                    endDate: new XDate(self.endDate()).toString("MM-dd-yyyy")
                },
                function (allData) {
                    self.usageRecords = ko.observableArray([]);

                    var parsedJson = JSON.parse(allData);

                    var mappedTasks = $.map(parsedJson, function (item) {
                        self.usageRecords().push(new UsageRecord(item))
                    });

                    console.log(self.usageRecords().count());

                    var axes = $('#' + type + '.usageChart').igDataChart("option", "axes");

                    if (self.selectedInterval()=='Daily') {
                        axes[0].formatLabel = formatDaily;
                    }
                    else if (self.selectedInterval() == 'Monthly') {
                        axes[0].formatLabel = formatMonthly;
                    }
                    else {
                        axes[0].formatLabel = formatYearly;
                    }

                    $('#' + type + '.usageChart').igDataChart({ dataSource: self.usageRecords() });
                    $('#' + type + '.usageChart').igDataChart("resetZoom");
                });
            }

        }

        function UsageViewModel() {
            var self = this;

            self.callsViewModel = new CallsViewModel();
            self.smsmessagesViewModel = new SmsMessagesViewModel();
            //self.phonenumbersViewModel = new PhoneNumbersViewModel();

            this.callsViewModel.updateUsageRecords();
            this.smsmessagesViewModel.updateUsageRecords();
            //this.phonenumbersViewModel.updateUsageRecords();
        }

        $(function () {

            vm = new UsageViewModel();

            $('.refresh').on('click', function () {
                var m = vm[$(this).attr('value') + 'ViewModel'];
                m.updateUsageRecords();
            });

            $('.dateSelector').datepicker({
                showOn: 'button',
                dateFormat: 'mm/dd/yy'
            });

            $(".usageChart").each(function () {

                $(this).igDataChart({
                    css: {
                        chart: "test"  
                    },
                    width: "100%",
                    height: "300px",
                    dataSource: [],
                    axes: [{
                        name: "xAxis",
                        type: "categoryX",
                        label: "startDate",
                        formatLabel: formatDaily
                    },
                    {
                        name: "yAxis",
                        type: "numericY"
                    }],
                    series: [{
                        name: "series1",
                        type: "column",
                        xAxis: "xAxis",
                        yAxis: "yAxis",
                        valueMemberPath: "usage"
                    }],

                })
            });

            ko.applyBindings(vm);
        });

        var formatDaily = function (item) {
            var d = new Date(item.startDate);
            var label =  d.getMonth() + '/' + d.getDate();
            return label;
        };

        var formatMonthly = function (item) {
            var ret = '';
            ret = new Date(item.startDate).getMonth();
            return ret;
        };

        var formatYear = function (item) {
            var ret = '';
            ret = new Date(item.startDate).getYear();
            return ret;
        };
    </script>

}